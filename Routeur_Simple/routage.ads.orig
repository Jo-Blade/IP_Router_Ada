with Ada.Text_IO;               use Ada.Text_IO;
with Ada.Strings.Unbounded;     use Ada.Strings.Unbounded;
with IP;                        use IP;
with Liste_Chainee;


package Routage is

  type T_Table is limited private;


  -- Initialiser la table de routage avec le fichier dédié
  procedure Initialiser_Table (Table_Routage : out T_Table; Fichier : in File_Type) with
    Pre => Is_Open(Fichier),
    Post => not Est_Vide (Table_Routage)
    and Contient_IP_Nulle (Table_Routage);

    function Trouver_Interface(Table_Routage : in T_Table ; IP : in T_IP) return Unbounded_String;

    --Afficher tous les élément de la table de routage
    procedure Afficher_Table(Table_Routage: in T_Table);

    function Contient_IP_Nulle(Table_Routage : in T_Table) return Boolean;

    function Est_Vide (Table_Routage : in T_Table) return Boolean;

private

<<<<<<< HEAD
    type T_Cellule is limited
      record
        Adresse : T_IP;
        Masque : T_IP;
        Interface_Nom : Unbounded_String;
      end record;
=======
    type T_Cellule is
        record
            Adresse : T_IP;
            Masque : T_IP;
            Interface_Nom : Unbounded_String;
        end record;
>>>>>>> refs/remotes/origin/main

    package Table_LC is new Liste_Chainee(T_Element => T_Cellule);
    use Table_LC;

    type T_Table is new T_LC;


end Routage;
